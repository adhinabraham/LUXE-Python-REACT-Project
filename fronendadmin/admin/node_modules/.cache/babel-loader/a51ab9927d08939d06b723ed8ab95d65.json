{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useRef, useEffect } from \"react\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Dashbordgraph() {\n  _s();\n\n  let [userLengthArray, setUserLengthArray] = useState([]);\n  let [userLoading, setUserLoading] = useState(false);\n  let [weekPrices, setWeekPrices] = useState([]);\n  let [salesDate, setSalesWeekDate] = useState([]);\n  let [totalOrder, setTotalOrder] = useState(0);\n  let [totalSales, setTotalSales] = useState(0);\n  let [totalRevenue, setTotalRevenue] = useState(0);\n  let [totalReturns, setTotalReturns] = useState(0);\n  let [dashDataLoading, setDashDataLoading] = useState(false); // ref\n\n  let userChartRef = useRef();\n  let salesReportRef = useRef();\n  useEffect(() => {\n    if (userLengthArray.length <= 0) return;\n    let userCanvas = userChartRef.current.getContext(\"2d\");\n    let chart = new window.Chart(userCanvas, {\n      type: \"pie\",\n      data: {\n        labels: [\"active\", \"blocked\"],\n        datasets: [{\n          label: [\"Active Users\", \"Blocked Users\"],\n          data: userLengthArray,\n          backgroundColor: [\"blue\", \"red\"]\n        }]\n      },\n      options: {\n        plugins: {\n          title: {\n            display: true,\n            text: \"Users\"\n          }\n        }\n      }\n    });\n    return () => chart.destroy();\n  }, [userLengthArray]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_s(Dashbordgraph, \"hQcHiI9Wfeq7xvusMvlUV8LsIZ4=\");\n\n_c = Dashbordgraph;\nexport default Dashbordgraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashbordgraph\");","map":{"version":3,"sources":["/home/adhin/sps/week10 project/fronendadmin/admin/src/components/Dashbord/Dashbordgraph.js"],"names":["React","useState","useRef","useEffect","Dashbordgraph","userLengthArray","setUserLengthArray","userLoading","setUserLoading","weekPrices","setWeekPrices","salesDate","setSalesWeekDate","totalOrder","setTotalOrder","totalSales","setTotalSales","totalRevenue","setTotalRevenue","totalReturns","setTotalReturns","dashDataLoading","setDashDataLoading","userChartRef","salesReportRef","length","userCanvas","current","getContext","chart","window","Chart","type","data","labels","datasets","label","backgroundColor","options","plugins","title","display","text","destroy"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,MAAnB,EAA2BC,SAA3B,QAA4C,OAA5C;;;;AAGA,SAASC,aAAT,GAAyB;AAAA;;AACtB,MAAI,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCL,QAAQ,CAAC,EAAD,CAApD;AACA,MAAI,CAACM,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,KAAD,CAA5C;AAEA,MAAI,CAACQ,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,EAAD,CAA1C;AACA,MAAI,CAACU,SAAD,EAAYC,gBAAZ,IAAgCX,QAAQ,CAAC,EAAD,CAA5C;AAEA,MAAI,CAACY,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,CAAD,CAA1C;AACA,MAAI,CAACc,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAAC,CAAD,CAA1C;AACA,MAAI,CAACgB,YAAD,EAAeC,eAAf,IAAkCjB,QAAQ,CAAC,CAAD,CAA9C;AACA,MAAI,CAACkB,YAAD,EAAeC,eAAf,IAAkCnB,QAAQ,CAAC,CAAD,CAA9C;AACA,MAAI,CAACoB,eAAD,EAAkBC,kBAAlB,IAAwCrB,QAAQ,CAAC,KAAD,CAApD,CAXsB,CAatB;;AACA,MAAIsB,YAAY,GAAGrB,MAAM,EAAzB;AACD,MAAIsB,cAAc,GAAGtB,MAAM,EAA3B;AACEC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIE,eAAe,CAACoB,MAAhB,IAA0B,CAA9B,EAAiC;AACjC,QAAIC,UAAU,GAAGH,YAAY,CAACI,OAAb,CAAqBC,UAArB,CAAgC,IAAhC,CAAjB;AACA,QAAIC,KAAK,GAAG,IAAIC,MAAM,CAACC,KAAX,CAAiBL,UAAjB,EAA6B;AACvCM,MAAAA,IAAI,EAAE,KADiC;AAEvCC,MAAAA,IAAI,EAAE;AACJC,QAAAA,MAAM,EAAE,CAAC,QAAD,EAAW,SAAX,CADJ;AAEJC,QAAAA,QAAQ,EAAE,CACR;AACEC,UAAAA,KAAK,EAAE,CAAC,cAAD,EAAiB,eAAjB,CADT;AAEEH,UAAAA,IAAI,EAAE5B,eAFR;AAGEgC,UAAAA,eAAe,EAAE,CAAC,MAAD,EAAS,KAAT;AAHnB,SADQ;AAFN,OAFiC;AAYvCC,MAAAA,OAAO,EAAE;AACPC,QAAAA,OAAO,EAAE;AACPC,UAAAA,KAAK,EAAE;AACLC,YAAAA,OAAO,EAAE,IADJ;AAELC,YAAAA,IAAI,EAAE;AAFD;AADA;AADF;AAZ8B,KAA7B,CAAZ;AAqBA,WAAO,MAAMb,KAAK,CAACc,OAAN,EAAb;AACD,GAzBQ,EAyBN,CAACtC,eAAD,CAzBM,CAAT;AA2BF,sBACE,qCADF;AAOD;;GAlDQD,a;;KAAAA,a;AAoDT,eAAeA,aAAf","sourcesContent":["import React from 'react'\nimport { useState, useRef, useEffect } from \"react\";\n\n\nfunction Dashbordgraph() {\n   let [userLengthArray, setUserLengthArray] = useState([]);\n   let [userLoading, setUserLoading] = useState(false);\n\n   let [weekPrices, setWeekPrices] = useState([]);\n   let [salesDate, setSalesWeekDate] = useState([]);\n\n   let [totalOrder, setTotalOrder] = useState(0);\n   let [totalSales, setTotalSales] = useState(0);\n   let [totalRevenue, setTotalRevenue] = useState(0);\n   let [totalReturns, setTotalReturns] = useState(0);\n   let [dashDataLoading, setDashDataLoading] = useState(false);\n\n   // ref\n   let userChartRef = useRef();\n  let salesReportRef = useRef();\n    useEffect(() => {\n      if (userLengthArray.length <= 0) return;\n      let userCanvas = userChartRef.current.getContext(\"2d\");\n      let chart = new window.Chart(userCanvas, {\n        type: \"pie\",\n        data: {\n          labels: [\"active\", \"blocked\"],\n          datasets: [\n            {\n              label: [\"Active Users\", \"Blocked Users\"],\n              data: userLengthArray,\n              backgroundColor: [\"blue\", \"red\"],\n            },\n          ],\n        },\n        options: {\n          plugins: {\n            title: {\n              display: true,\n              text: \"Users\",\n            },\n          },\n        },\n      });\n      return () => chart.destroy();\n    }, [userLengthArray]);\n\n  return (\n    <>\n      \n          \n        </>\n         \n  )\n}\n\nexport default Dashbordgraph"]},"metadata":{},"sourceType":"module"}